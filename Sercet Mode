--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.8) ~  Much Love, Ferib 

]]--

local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 81) then
			local FlatIdent_76979 = 0;
			while true do
				if (FlatIdent_76979 == 0) then
					repeatNext = StrToNumber(Sub(byte, 1, 1));
					return "";
				end
			end
		else
			local a = Char(StrToNumber(byte, 16));
			if repeatNext then
				local FlatIdent_69270 = 0;
				local b;
				while true do
					if (FlatIdent_69270 == 1) then
						return b;
					end
					if (FlatIdent_69270 == 0) then
						b = Rep(a, repeatNext);
						repeatNext = nil;
						FlatIdent_69270 = 1;
					end
				end
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local FlatIdent_7126A = 0;
			local Plc;
			while true do
				if (FlatIdent_7126A == 0) then
					Plc = 2 ^ (Start - 1);
					return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
				end
			end
		end
	end
	local function gBits8()
		local FlatIdent_12703 = 0;
		local a;
		while true do
			if (FlatIdent_12703 == 0) then
				a = Byte(ByteString, DIP, DIP);
				DIP = DIP + 1;
				FlatIdent_12703 = 1;
			end
			if (FlatIdent_12703 == 1) then
				return a;
			end
		end
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local FlatIdent_475BC = 0;
		local Left;
		local Right;
		local IsNormal;
		local Mantissa;
		local Exponent;
		local Sign;
		while true do
			if (FlatIdent_475BC == 3) then
				if (Exponent == 0) then
					if (Mantissa == 0) then
						return Sign * 0;
					else
						local FlatIdent_1076E = 0;
						while true do
							if (FlatIdent_1076E == 0) then
								Exponent = 1;
								IsNormal = 0;
								break;
							end
						end
					end
				elseif (Exponent == 2047) then
					return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
				end
				return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
			end
			if (FlatIdent_475BC == 1) then
				IsNormal = 1;
				Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
				FlatIdent_475BC = 2;
			end
			if (FlatIdent_475BC == 2) then
				Exponent = gBit(Right, 21, 31);
				Sign = ((gBit(Right, 32) == 1) and -1) or 1;
				FlatIdent_475BC = 3;
			end
			if (FlatIdent_475BC == 0) then
				Left = gBits32();
				Right = gBits32();
				FlatIdent_475BC = 1;
			end
		end
	end
	local function gString(Len)
		local Str;
		if not Len then
			local FlatIdent_C460 = 0;
			while true do
				if (FlatIdent_C460 == 0) then
					Len = gBits32();
					if (Len == 0) then
						return "";
					end
					break;
				end
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local FlatIdent_104D4 = 0;
		local Instrs;
		local Functions;
		local Lines;
		local Chunk;
		local ConstCount;
		local Consts;
		while true do
			if (FlatIdent_104D4 == 1) then
				ConstCount = gBits32();
				Consts = {};
				for Idx = 1, ConstCount do
					local Type = gBits8();
					local Cons;
					if (Type == 1) then
						Cons = gBits8() ~= 0;
					elseif (Type == 2) then
						Cons = gFloat();
					elseif (Type == 3) then
						Cons = gString();
					end
					Consts[Idx] = Cons;
				end
				Chunk[3] = gBits8();
				FlatIdent_104D4 = 2;
			end
			if (2 == FlatIdent_104D4) then
				for Idx = 1, gBits32() do
					local FlatIdent_40CF = 0;
					local Descriptor;
					while true do
						if (FlatIdent_40CF == 0) then
							Descriptor = gBits8();
							if (gBit(Descriptor, 1, 1) == 0) then
								local Type = gBit(Descriptor, 2, 3);
								local Mask = gBit(Descriptor, 4, 6);
								local Inst = {gBits16(),gBits16(),nil,nil};
								if (Type == 0) then
									local FlatIdent_49AED = 0;
									while true do
										if (FlatIdent_49AED == 0) then
											Inst[3] = gBits16();
											Inst[4] = gBits16();
											break;
										end
									end
								elseif (Type == 1) then
									Inst[3] = gBits32();
								elseif (Type == 2) then
									Inst[3] = gBits32() - (2 ^ 16);
								elseif (Type == 3) then
									Inst[3] = gBits32() - (2 ^ 16);
									Inst[4] = gBits16();
								end
								if (gBit(Mask, 1, 1) == 1) then
									Inst[2] = Consts[Inst[2]];
								end
								if (gBit(Mask, 2, 2) == 1) then
									Inst[3] = Consts[Inst[3]];
								end
								if (gBit(Mask, 3, 3) == 1) then
									Inst[4] = Consts[Inst[4]];
								end
								Instrs[Idx] = Inst;
							end
							break;
						end
					end
				end
				for Idx = 1, gBits32() do
					Functions[Idx - 1] = Deserialize();
				end
				return Chunk;
			end
			if (FlatIdent_104D4 == 0) then
				Instrs = {};
				Functions = {};
				Lines = {};
				Chunk = {Instrs,Functions,nil,Lines};
				FlatIdent_104D4 = 1;
			end
		end
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (Enum <= 66) then
					if (Enum <= 32) then
						if (Enum <= 15) then
							if (Enum <= 7) then
								if (Enum <= 3) then
									if (Enum <= 1) then
										if (Enum == 0) then
											if (Stk[Inst[2]] <= Inst[4]) then
												VIP = VIP + 1;
											else
												VIP = Inst[3];
											end
										else
											Stk[Inst[2]] = Inst[3] / Inst[4];
										end
									elseif (Enum == 2) then
										if not Stk[Inst[2]] then
											VIP = VIP + 1;
										else
											VIP = Inst[3];
										end
									else
										Stk[Inst[2]] = Stk[Inst[3]] * Inst[4];
									end
								elseif (Enum <= 5) then
									if (Enum > 4) then
										Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
									else
										local A = Inst[2];
										local Index = Stk[A];
										local Step = Stk[A + 2];
										if (Step > 0) then
											if (Index > Stk[A + 1]) then
												VIP = Inst[3];
											else
												Stk[A + 3] = Index;
											end
										elseif (Index < Stk[A + 1]) then
											VIP = Inst[3];
										else
											Stk[A + 3] = Index;
										end
									end
								elseif (Enum == 6) then
									Stk[Inst[2]] = Env[Inst[3]];
								else
									Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
								end
							elseif (Enum <= 11) then
								if (Enum <= 9) then
									if (Enum > 8) then
										Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
									else
										Stk[Inst[2]] = Stk[Inst[3]] * Inst[4];
									end
								elseif (Enum == 10) then
									Stk[Inst[2]] = Stk[Inst[3]] / Stk[Inst[4]];
								else
									local FlatIdent_8CEDF = 0;
									local A;
									while true do
										if (FlatIdent_8CEDF == 0) then
											A = Inst[2];
											Stk[A](Unpack(Stk, A + 1, Inst[3]));
											break;
										end
									end
								end
							elseif (Enum <= 13) then
								if (Enum == 12) then
									local FlatIdent_33EA4 = 0;
									local A;
									while true do
										if (FlatIdent_33EA4 == 0) then
											A = Inst[2];
											Stk[A] = Stk[A]();
											break;
										end
									end
								else
									Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
								end
							elseif (Enum == 14) then
								if (Inst[2] > Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]];
							end
						elseif (Enum <= 23) then
							if (Enum <= 19) then
								if (Enum <= 17) then
									if (Enum == 16) then
										local A = Inst[2];
										local T = Stk[A];
										local B = Inst[3];
										for Idx = 1, B do
											T[Idx] = Stk[A + Idx];
										end
									else
										Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
									end
								elseif (Enum == 18) then
									if (Stk[Inst[2]] <= Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local FlatIdent_25DF3 = 0;
									local A;
									local T;
									while true do
										if (FlatIdent_25DF3 == 1) then
											for Idx = A + 1, Inst[3] do
												Insert(T, Stk[Idx]);
											end
											break;
										end
										if (FlatIdent_25DF3 == 0) then
											A = Inst[2];
											T = Stk[A];
											FlatIdent_25DF3 = 1;
										end
									end
								end
							elseif (Enum <= 21) then
								if (Enum == 20) then
									Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
								else
									local A = Inst[2];
									Top = (A + Varargsz) - 1;
									for Idx = A, Top do
										local FlatIdent_66799 = 0;
										local VA;
										while true do
											if (FlatIdent_66799 == 0) then
												VA = Vararg[Idx - A];
												Stk[Idx] = VA;
												break;
											end
										end
									end
								end
							elseif (Enum > 22) then
								Stk[Inst[2]] = Upvalues[Inst[3]];
							else
								Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
							end
						elseif (Enum <= 27) then
							if (Enum <= 25) then
								if (Enum == 24) then
									Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
								else
									Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
								end
							elseif (Enum > 26) then
								Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
							else
								local FlatIdent_295EB = 0;
								local A;
								local Step;
								local Index;
								while true do
									if (FlatIdent_295EB == 0) then
										A = Inst[2];
										Step = Stk[A + 2];
										FlatIdent_295EB = 1;
									end
									if (FlatIdent_295EB == 1) then
										Index = Stk[A] + Step;
										Stk[A] = Index;
										FlatIdent_295EB = 2;
									end
									if (FlatIdent_295EB == 2) then
										if (Step > 0) then
											if (Index <= Stk[A + 1]) then
												local FlatIdent_27404 = 0;
												while true do
													if (FlatIdent_27404 == 0) then
														VIP = Inst[3];
														Stk[A + 3] = Index;
														break;
													end
												end
											end
										elseif (Index >= Stk[A + 1]) then
											local FlatIdent_9622C = 0;
											while true do
												if (FlatIdent_9622C == 0) then
													VIP = Inst[3];
													Stk[A + 3] = Index;
													break;
												end
											end
										end
										break;
									end
								end
							end
						elseif (Enum <= 29) then
							if (Enum == 28) then
								if (Stk[Inst[2]] <= Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								local FlatIdent_2D88C = 0;
								local A;
								local Results;
								local Limit;
								local Edx;
								while true do
									if (2 == FlatIdent_2D88C) then
										for Idx = A, Top do
											Edx = Edx + 1;
											Stk[Idx] = Results[Edx];
										end
										break;
									end
									if (FlatIdent_2D88C == 0) then
										A = Inst[2];
										Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
										FlatIdent_2D88C = 1;
									end
									if (1 == FlatIdent_2D88C) then
										Top = (Limit + A) - 1;
										Edx = 0;
										FlatIdent_2D88C = 2;
									end
								end
							end
						elseif (Enum <= 30) then
							local NewProto = Proto[Inst[3]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1][Val[2]];
							end,__newindex=function(_, Key, Value)
								local FlatIdent_20FB0 = 0;
								local Val;
								while true do
									if (0 == FlatIdent_20FB0) then
										Val = Indexes[Key];
										Val[1][Val[2]] = Value;
										break;
									end
								end
							end});
							for Idx = 1, Inst[4] do
								VIP = VIP + 1;
								local Mvm = Instr[VIP];
								if (Mvm[1] == 56) then
									Indexes[Idx - 1] = {Stk,Mvm[3]};
								else
									Indexes[Idx - 1] = {Upvalues,Mvm[3]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
						elseif (Enum > 31) then
							Stk[Inst[2]] = Inst[3] / Inst[4];
						elseif (Inst[2] < Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 49) then
						if (Enum <= 40) then
							if (Enum <= 36) then
								if (Enum <= 34) then
									if (Enum == 33) then
										Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
									elseif (Stk[Inst[2]] <= Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum == 35) then
									Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
								else
									local FlatIdent_5B4A8 = 0;
									while true do
										if (FlatIdent_5B4A8 == 0) then
											Stk[Inst[2]] = Inst[3] ~= 0;
											VIP = VIP + 1;
											break;
										end
									end
								end
							elseif (Enum <= 38) then
								if (Enum == 37) then
									for Idx = Inst[2], Inst[3] do
										Stk[Idx] = nil;
									end
								elseif (Inst[2] <= Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum > 39) then
								local A = Inst[2];
								do
									return Unpack(Stk, A, Top);
								end
							else
								Stk[Inst[2]] = #Stk[Inst[3]];
							end
						elseif (Enum <= 44) then
							if (Enum <= 42) then
								if (Enum == 41) then
									local FlatIdent_5477B = 0;
									local A;
									local Step;
									local Index;
									while true do
										if (FlatIdent_5477B == 0) then
											A = Inst[2];
											Step = Stk[A + 2];
											FlatIdent_5477B = 1;
										end
										if (1 == FlatIdent_5477B) then
											Index = Stk[A] + Step;
											Stk[A] = Index;
											FlatIdent_5477B = 2;
										end
										if (FlatIdent_5477B == 2) then
											if (Step > 0) then
												if (Index <= Stk[A + 1]) then
													VIP = Inst[3];
													Stk[A + 3] = Index;
												end
											elseif (Index >= Stk[A + 1]) then
												local FlatIdent_2E9CB = 0;
												while true do
													if (FlatIdent_2E9CB == 0) then
														VIP = Inst[3];
														Stk[A + 3] = Index;
														break;
													end
												end
											end
											break;
										end
									end
								else
									local FlatIdent_29E69 = 0;
									local A;
									while true do
										if (FlatIdent_29E69 == 0) then
											A = Inst[2];
											do
												return Stk[A](Unpack(Stk, A + 1, Top));
											end
											break;
										end
									end
								end
							elseif (Enum > 43) then
								local FlatIdent_466B2 = 0;
								local A;
								while true do
									if (1 == FlatIdent_466B2) then
										for Idx = A, Top do
											local VA = Vararg[Idx - A];
											Stk[Idx] = VA;
										end
										break;
									end
									if (FlatIdent_466B2 == 0) then
										A = Inst[2];
										Top = (A + Varargsz) - 1;
										FlatIdent_466B2 = 1;
									end
								end
							else
								Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
							end
						elseif (Enum <= 46) then
							if (Enum == 45) then
								local FlatIdent_75224 = 0;
								local A;
								while true do
									if (FlatIdent_75224 == 0) then
										A = Inst[2];
										Stk[A](Stk[A + 1]);
										break;
									end
								end
							else
								Stk[Inst[2]] = Inst[3];
							end
						elseif (Enum <= 47) then
							if (Inst[2] < Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum == 48) then
							Stk[Inst[2]] = Inst[3] ~= 0;
						else
							Stk[Inst[2]] = Inst[3] ~= 0;
							VIP = VIP + 1;
						end
					elseif (Enum <= 57) then
						if (Enum <= 53) then
							if (Enum <= 51) then
								if (Enum > 50) then
									if (Inst[2] > Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									Stk[Inst[2]] = #Stk[Inst[3]];
								end
							elseif (Enum > 52) then
								local A = Inst[2];
								Stk[A] = Stk[A]();
							else
								Upvalues[Inst[3]] = Stk[Inst[2]];
							end
						elseif (Enum <= 55) then
							if (Enum == 54) then
								local A = Inst[2];
								local T = Stk[A];
								for Idx = A + 1, Top do
									Insert(T, Stk[Idx]);
								end
							else
								do
									return Stk[Inst[2]];
								end
							end
						elseif (Enum == 56) then
							Stk[Inst[2]] = Stk[Inst[3]];
						elseif (Inst[2] ~= Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 61) then
						if (Enum <= 59) then
							if (Enum > 58) then
								Stk[Inst[2]] = {};
							else
								Stk[Inst[2]] = {};
							end
						elseif (Enum == 60) then
							if (Stk[Inst[2]] > Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							local FlatIdent_22216 = 0;
							local A;
							while true do
								if (0 == FlatIdent_22216) then
									A = Inst[2];
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
									break;
								end
							end
						end
					elseif (Enum <= 63) then
						if (Enum > 62) then
							Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
						else
							Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
						end
					elseif (Enum <= 64) then
						local A = Inst[2];
						Stk[A](Unpack(Stk, A + 1, Top));
					elseif (Enum == 65) then
						local FlatIdent_DFF4 = 0;
						local A;
						while true do
							if (FlatIdent_DFF4 == 0) then
								A = Inst[2];
								do
									return Unpack(Stk, A, A + Inst[3]);
								end
								break;
							end
						end
					else
						do
							return;
						end
					end
				elseif (Enum <= 99) then
					if (Enum <= 82) then
						if (Enum <= 74) then
							if (Enum <= 70) then
								if (Enum <= 68) then
									if (Enum == 67) then
										local FlatIdent_7DFA5 = 0;
										local A;
										local T;
										local B;
										while true do
											if (FlatIdent_7DFA5 == 1) then
												B = Inst[3];
												for Idx = 1, B do
													T[Idx] = Stk[A + Idx];
												end
												break;
											end
											if (FlatIdent_7DFA5 == 0) then
												A = Inst[2];
												T = Stk[A];
												FlatIdent_7DFA5 = 1;
											end
										end
									else
										Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
									end
								elseif (Enum > 69) then
									if (Inst[2] == Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									do
										return;
									end
								end
							elseif (Enum <= 72) then
								if (Enum == 71) then
									if (Stk[Inst[2]] ~= Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local FlatIdent_25A9F = 0;
									local A;
									while true do
										if (FlatIdent_25A9F == 0) then
											A = Inst[2];
											do
												return Unpack(Stk, A, Top);
											end
											break;
										end
									end
								end
							elseif (Enum > 73) then
								if (Inst[2] < Stk[Inst[4]]) then
									VIP = Inst[3];
								else
									VIP = VIP + 1;
								end
							elseif (Inst[2] < Inst[4]) then
								VIP = Inst[3];
							else
								VIP = VIP + 1;
							end
						elseif (Enum <= 78) then
							if (Enum <= 76) then
								if (Enum > 75) then
									local FlatIdent_72421 = 0;
									local A;
									while true do
										if (FlatIdent_72421 == 0) then
											A = Inst[2];
											Stk[A](Stk[A + 1]);
											break;
										end
									end
								else
									Stk[Inst[2]] = Env[Inst[3]];
								end
							elseif (Enum > 77) then
								if (Inst[2] < Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								local FlatIdent_4508F = 0;
								local A;
								while true do
									if (FlatIdent_4508F == 0) then
										A = Inst[2];
										Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
										break;
									end
								end
							end
						elseif (Enum <= 80) then
							if (Enum > 79) then
								Upvalues[Inst[3]] = Stk[Inst[2]];
							else
								local FlatIdent_284EA = 0;
								local A;
								local Results;
								local Edx;
								while true do
									if (FlatIdent_284EA == 0) then
										A = Inst[2];
										Results = {Stk[A](Unpack(Stk, A + 1, Inst[3]))};
										FlatIdent_284EA = 1;
									end
									if (FlatIdent_284EA == 1) then
										Edx = 0;
										for Idx = A, Inst[4] do
											local FlatIdent_77172 = 0;
											while true do
												if (FlatIdent_77172 == 0) then
													Edx = Edx + 1;
													Stk[Idx] = Results[Edx];
													break;
												end
											end
										end
										break;
									end
								end
							end
						elseif (Enum > 81) then
							if (Stk[Inst[2]] ~= Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							Stk[Inst[2]] = Inst[3] ^ Stk[Inst[4]];
						end
					elseif (Enum <= 90) then
						if (Enum <= 86) then
							if (Enum <= 84) then
								if (Enum == 83) then
									local FlatIdent_521D6 = 0;
									local A;
									while true do
										if (0 == FlatIdent_521D6) then
											A = Inst[2];
											do
												return Stk[A](Unpack(Stk, A + 1, Top));
											end
											break;
										end
									end
								else
									local FlatIdent_634AF = 0;
									local A;
									local Results;
									local Limit;
									local Edx;
									while true do
										if (FlatIdent_634AF == 2) then
											for Idx = A, Top do
												local FlatIdent_42BD8 = 0;
												while true do
													if (FlatIdent_42BD8 == 0) then
														Edx = Edx + 1;
														Stk[Idx] = Results[Edx];
														break;
													end
												end
											end
											break;
										end
										if (FlatIdent_634AF == 1) then
											Top = (Limit + A) - 1;
											Edx = 0;
											FlatIdent_634AF = 2;
										end
										if (0 == FlatIdent_634AF) then
											A = Inst[2];
											Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
											FlatIdent_634AF = 1;
										end
									end
								end
							elseif (Enum == 85) then
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							else
								Stk[Inst[2]] = Stk[Inst[3]];
							end
						elseif (Enum <= 88) then
							if (Enum > 87) then
								local FlatIdent_28855 = 0;
								local A;
								local Results;
								local Edx;
								while true do
									if (FlatIdent_28855 == 1) then
										Edx = 0;
										for Idx = A, Inst[4] do
											local FlatIdent_276C2 = 0;
											while true do
												if (FlatIdent_276C2 == 0) then
													Edx = Edx + 1;
													Stk[Idx] = Results[Edx];
													break;
												end
											end
										end
										break;
									end
									if (FlatIdent_28855 == 0) then
										A = Inst[2];
										Results = {Stk[A](Unpack(Stk, A + 1, Inst[3]))};
										FlatIdent_28855 = 1;
									end
								end
							else
								local FlatIdent_6D68E = 0;
								local A;
								while true do
									if (FlatIdent_6D68E == 0) then
										A = Inst[2];
										Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
										break;
									end
								end
							end
						elseif (Enum == 89) then
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						else
							Stk[Inst[2]]();
						end
					elseif (Enum <= 94) then
						if (Enum <= 92) then
							if (Enum == 91) then
								local FlatIdent_4A248 = 0;
								local A;
								local Results;
								local Limit;
								local Edx;
								while true do
									if (0 == FlatIdent_4A248) then
										A = Inst[2];
										Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
										FlatIdent_4A248 = 1;
									end
									if (FlatIdent_4A248 == 2) then
										for Idx = A, Top do
											Edx = Edx + 1;
											Stk[Idx] = Results[Edx];
										end
										break;
									end
									if (1 == FlatIdent_4A248) then
										Top = (Limit + A) - 1;
										Edx = 0;
										FlatIdent_4A248 = 2;
									end
								end
							elseif Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum > 93) then
							local A = Inst[2];
							local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Top)));
							Top = (Limit + A) - 1;
							local Edx = 0;
							for Idx = A, Top do
								local FlatIdent_43626 = 0;
								while true do
									if (0 == FlatIdent_43626) then
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
										break;
									end
								end
							end
						elseif not Stk[Inst[2]] then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 96) then
						if (Enum == 95) then
							local A = Inst[2];
							local Results = {Stk[A](Unpack(Stk, A + 1, Top))};
							local Edx = 0;
							for Idx = A, Inst[4] do
								local FlatIdent_43337 = 0;
								while true do
									if (FlatIdent_43337 == 0) then
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
										break;
									end
								end
							end
						elseif (Stk[Inst[2]] == Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 97) then
						Stk[Inst[2]] = Stk[Inst[3]] - Inst[4];
					elseif (Enum == 98) then
						for Idx = Inst[2], Inst[3] do
							Stk[Idx] = nil;
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
					end
				elseif (Enum <= 116) then
					if (Enum <= 107) then
						if (Enum <= 103) then
							if (Enum <= 101) then
								if (Enum == 100) then
									Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
								elseif (Stk[Inst[2]] == Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum > 102) then
								Stk[Inst[2]] = Stk[Inst[3]] / Inst[4];
							else
								local NewProto = Proto[Inst[3]];
								local NewUvals;
								local Indexes = {};
								NewUvals = Setmetatable({}, {__index=function(_, Key)
									local Val = Indexes[Key];
									return Val[1][Val[2]];
								end,__newindex=function(_, Key, Value)
									local FlatIdent_1468D = 0;
									local Val;
									while true do
										if (FlatIdent_1468D == 0) then
											Val = Indexes[Key];
											Val[1][Val[2]] = Value;
											break;
										end
									end
								end});
								for Idx = 1, Inst[4] do
									local FlatIdent_651C5 = 0;
									local Mvm;
									while true do
										if (FlatIdent_651C5 == 0) then
											VIP = VIP + 1;
											Mvm = Instr[VIP];
											FlatIdent_651C5 = 1;
										end
										if (FlatIdent_651C5 == 1) then
											if (Mvm[1] == 56) then
												Indexes[Idx - 1] = {Stk,Mvm[3]};
											else
												Indexes[Idx - 1] = {Upvalues,Mvm[3]};
											end
											Lupvals[#Lupvals + 1] = Indexes;
											break;
										end
									end
								end
								Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
							end
						elseif (Enum <= 105) then
							if (Enum > 104) then
								if (Inst[2] ~= Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								VIP = Inst[3];
							end
						elseif (Enum == 106) then
							if (Stk[Inst[2]] > Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 111) then
						if (Enum <= 109) then
							if (Enum > 108) then
								local FlatIdent_956D = 0;
								local A;
								while true do
									if (FlatIdent_956D == 0) then
										A = Inst[2];
										Stk[A] = Stk[A](Stk[A + 1]);
										break;
									end
								end
							else
								Stk[Inst[2]] = Inst[3] ~= 0;
							end
						elseif (Enum > 110) then
							Stk[Inst[2]] = Stk[Inst[3]] / Stk[Inst[4]];
						else
							Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
						end
					elseif (Enum <= 113) then
						if (Enum == 112) then
							do
								return Stk[Inst[2]];
							end
						else
							local FlatIdent_3B868 = 0;
							local A;
							while true do
								if (FlatIdent_3B868 == 0) then
									A = Inst[2];
									Stk[A](Unpack(Stk, A + 1, Top));
									break;
								end
							end
						end
					elseif (Enum <= 114) then
						Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
					elseif (Enum > 115) then
						if (Inst[2] < Stk[Inst[4]]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					else
						Stk[Inst[2]] = Inst[3];
					end
				elseif (Enum <= 124) then
					if (Enum <= 120) then
						if (Enum <= 118) then
							if (Enum > 117) then
								Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
							elseif Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum == 119) then
							local FlatIdent_D14D = 0;
							local A;
							while true do
								if (FlatIdent_D14D == 0) then
									A = Inst[2];
									do
										return Stk[A](Unpack(Stk, A + 1, Inst[3]));
									end
									break;
								end
							end
						else
							local A = Inst[2];
							local Index = Stk[A];
							local Step = Stk[A + 2];
							if (Step > 0) then
								if (Index > Stk[A + 1]) then
									VIP = Inst[3];
								else
									Stk[A + 3] = Index;
								end
							elseif (Index < Stk[A + 1]) then
								VIP = Inst[3];
							else
								Stk[A + 3] = Index;
							end
						end
					elseif (Enum <= 122) then
						if (Enum == 121) then
							if (Inst[2] < Inst[4]) then
								VIP = Inst[3];
							else
								VIP = VIP + 1;
							end
						else
							Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
						end
					elseif (Enum == 123) then
						if (Inst[2] == Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					else
						Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
					end
				elseif (Enum <= 128) then
					if (Enum <= 126) then
						if (Enum == 125) then
							if (Inst[2] < Stk[Inst[4]]) then
								VIP = Inst[3];
							else
								VIP = VIP + 1;
							end
						else
							local FlatIdent_803FB = 0;
							local A;
							while true do
								if (FlatIdent_803FB == 0) then
									A = Inst[2];
									do
										return Stk[A](Unpack(Stk, A + 1, Inst[3]));
									end
									break;
								end
							end
						end
					elseif (Enum == 127) then
						local A = Inst[2];
						local T = Stk[A];
						for Idx = A + 1, Top do
							Insert(T, Stk[Idx]);
						end
					elseif (Inst[2] <= Inst[4]) then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif (Enum <= 130) then
					if (Enum == 129) then
						Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
					else
						local FlatIdent_55D83 = 0;
						local A;
						while true do
							if (FlatIdent_55D83 == 0) then
								A = Inst[2];
								Stk[A] = Stk[A](Stk[A + 1]);
								break;
							end
						end
					end
				elseif (Enum <= 131) then
					local A = Inst[2];
					local Results = {Stk[A](Unpack(Stk, A + 1, Top))};
					local Edx = 0;
					for Idx = A, Inst[4] do
						Edx = Edx + 1;
						Stk[Idx] = Results[Edx];
					end
				elseif (Enum == 132) then
					Stk[Inst[2]] = Upvalues[Inst[3]];
				else
					Stk[Inst[2]]();
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCalletFEnv(), ...);
